1. 비동기, setTimeout, setInterval, Promise, 이벤트 루프
2. ajax, axios, fetch, 실행 컨텍스트, 클로저, 프로토 타입

===============================================================

비동기
자바스크립트 싱글 스래드 == 일꾼이 1명

동기(순차적), 비동기(순서대로x)

===============================================================

setTimeout
  특정 시간 이후에 원하는 코드블럭을 실행하는 배동기 함수

setInterval
  특정 주기 마다 원하는 코드블럭을 실행하는 비동기 함수
  타이머, 자동 화면 변경 슬라이드배너 

  clearTimeout, clearInterval : 
  초기화 가능

===============================================================

비동기 함수는 동기함수가 모두 실행되어야만 실행됩니다.

===============================================================

이벤트 루프
  브라우저의 데이터의 실행 환경을 제어하는 관리자

1. 콜스택


2. WebAPIs (백엔드 요청, 비동기 함수, DOM)


3. callback queue (task queue, microtask queue)
  WebAPIs가 실행되고 나면 실행결과는 콜백큐로 이동된다
  콜백큐는 콜스택이 모두 비워져있는 것을 확인하면 결과를 순차적으로 실행


스택과 큐(자료구조)
  스택(항아리)
    : Last In First Out (LIFO)
    마지막에 들어온 순서대로 실행하는 것

  큐(빨대)
    : First In First Out (FIFO)
    처음 들어온 순서대로 실행되는 것

** 순차적인 것이 먼저 실행된 후 비동기가 실행된다 **

===============================================================

비동기 처리

b(10초)--비동기
c(b) -- 동기

비동기 이후에 실행해야하는 코드까지 하나의 블럭으로 묶을 필요
비동기로 만들어버리는 것

1.Promise
  비동기 이후의 대기, 실행, 실패 유무에 따라 분기처리를 할 수 있도록 도와주는 함수다.

  new Promise((resolve, reject)=>{
    console.log("안녕하세요")

  resolve(--매개변수--) : 실행이 완료되었다
  reject(--매개변수--): 실행이 실패하였다
  }).then((resolve의 매개변수)=>{
    ...코드 작성...
  }).catch((reject의 매기변수)=>{
    console.error()

if(response.status === 404){
  window.location.href = "/404"
  alert("잘못된 접근 입니다.")
}
throw NotFound(error)
  })



  

2.async await